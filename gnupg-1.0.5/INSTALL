Installation instructions for GnuPG
====================================
  Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

  This file is free software; as a special exception the author gives
  unlimited permission to copy and/or distribute it, with or without
  modifications, as long as this notice is preserved.

  This file is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Please read the Basic Installation section somewhere below.

Configure options for GNUPG
===========================

--enable-static-rnd=<name>  Force the use of the random byte gathering
		     module <name>.  Default is either to use /dev/random
		     or the standard Uix module.  Value for name:
		       egd - Use the module which accesses the
			     Entropy Gathering Daemon. See the webpages
			     for more information about it.
		      unix - Use the standard Unix module which does not
			     have a very good performance.
		     linux - Use the module which accesses /dev/random.
			     This is the first choice and the default one
			     for GNU/Linux or *BSD.
		      none - Do not linkl any module in but rely on
			     a dynmically loaded modules.

--with-egd-socket=<name>  This is only used when EGD is used as random
                     gatherer. GnuPG uses by default "~/.gnupg/entropy"
                     as the socket to connect EGD.  Using this option the
                     socket name can be changed.  You may use any filename
                     here with 2 exceptions:  a filename starting with
                     "~/" uses the socket in the homedirectory of the user
                     and one starting with a "=" uses a socket in the
                     GnuPG homedirectory which is bye default "~/.gnupg".
   
--with-included-zlib Forces usage of the local zlib sources. Default is
		     to use the (shared) library of the system.

--with-included-gettext Forces usage of the local gettext sources instead of
		    the one provided by your system.

--disable-nls	    Disable NLS support (See the file ABOUT-NLS)

--enable-m-guard    Enable the integrated malloc checking code. Please
                    note that this feature does not work on all CPUs
                    (e.g. SunOS 5.7 on UltraSparc-2) and might give
                    you a Bus error.

--disable-dynload   If you have problems with dynamic loading, this option
		    disables all dynamic loading stuff.

--disable-asm	    Do not use assembler modules.  It is not possible to
		    use this on some CPU types.



Problems
========

If you get unresolved externals "gettext" you should run configure again
with the option "--with-included-gettext"; this is version 0.10.35 which
is available at alpha.gnu.org.

If you have other compile problems, try the configure options
"--with-included-zlib" or "--disable-nls" (See ABOUT-NLS)
or --disable-dynload.

I can't check all assembler files, so if you have problems assembling them
(or the program crashes) use --disable-asm with ./configure.
The configure scripts may consider several subdirectories to get all
available assembler files; be sure to delete the correct ones. The
assembler replacements are in C and in mpi/generic; never delete udiv-qrnnd.S
in any CPU directory, because there may be no C substitute.
Don't forget to delete "config.cache" and run "./config.status --recheck".

Some make tools are broken - the best solution is to use GNU's make.  Try
gmake or grab the sources from a GNU archive and install them.

On some OSF you may get unresolved externals.  This is a libtool problem and
the workaround is to manually remove all the "-lc -lz" but the last one from
the linker line and execute them manually.

On some architectures you get warnings like:
  longlong.h:175: warning: function declaration isn't a prototype
or
  http.c:647: warning: cast increases required alignment of target type
This doesn't matter and we know about it (actually it is due to the some
warning options which we have enabled for gcc)


Specific problems on some machines
==================================

  * IBM RS/6000 running AIX:

	Due to a change in gcc (since version 2.8) the MPI stuff may
	not build. In this case try to run configure using:
	    CFLAGS="-g -O2 -mcpu=powerpc" ./configure

  * Solaris

	There are reports that the function gethrtime() as used in
	cipher/random.c raised a SIGILL.  It seems that is due to
	a header/lib miscmatch.  Solution is to fix the Solaris
	installation or comment the call to gethrtime().



The Random Device
=================
Random devices are available in Linux, FreeBSD and OpenBSD.
The random device files may not exist on your system, please check whether
they do and create them if needed.

The Linux files should look like this:
    cr--r--r--	 1 root     sys        1,   8 May 28  1997 /dev/random
    cr--r--r--	 1 root     sys        1,   9 Feb 16 08:23 /dev/urandom
You can create them with:
    mknod /dev/random c 1 8
    mknod /dev/urandom c 1 9

The FreeBSD files [from the 970202 snapshot]:
    crw-r--r--	1 root	wheel	 2,   3 Feb 25 16:54 /dev/random
    crw-r--r--	1 root	wheel	 2,   4 Feb 25 16:54 /dev/urandom
You can create them with:
    mknod /dev/random  c 2 3
    mknod /dev/urandom c 2 4

Unices without a random devices must use another entropy collector.  One
entropy collector called rndunix and available as an extension module. You
should put this in your ~/.gnupg/options file:
===8<====================
load-extension rndunix
===>8====================
This collector works by running a lot of commands that yield more or
less unpredictable output and feds this as entropy into the random
generator - It should work reliably but you should check whether
it produces good output for your version of Unix. There are some debug
options to help you (see cipher/rndunix.c).



Installation
============
gpg is not installed as suid:root; if you want to do that, do it manually.
We will use capabilities in the future.

The ~/.gnupg directory will be created if it does not exist.  Your first
action should be to create a key pair: "gpg --gen-key".

Due to limitations in the automake system, the Info format versions of
the man pages are not installed.  You have to convert the Texinfo
files by hand (use makeinfo) and copy them to the appropriate place.



Creating a RPM package
======================
The file scripts/gnupg.spec is used to build a RPM package (both
binary and src):
    1. copy the spec file into /usr/src/redhat/SPECS
    2. copy the tar file into /usr/src/redhat/SOURCES
    3. type: rpm -ba SPECS/gnupg.spec

Or use the -t (--tarbuild) option of rpm:
    1. rpm -ta gnupg-x.x.x.tar.gz

The binary rpm file can now be found in /usr/src/redhat/RPMS, source
rpm in	/usr/src/redhat/SRPMS

Please note that to install gnupg binary rpm you must be root, as
gnupg needs to be suid root, at least on Linux machines


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used by the program `autoconf' to create
`configure'.  You only need `configure.in' if you want to change it or
regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or, on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at
the same time by placing the object files for each architecture in
their own directory.  To do this, you must use a version of `make',
such as GNU `make', that supports the `VPATH' variable.  `cd' to the
directory where you want the object files and executables to go and
run the `configure' script; please use a relative filename name to
invoke `configure'.  `configure' automatically checks for the source
code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.	To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

